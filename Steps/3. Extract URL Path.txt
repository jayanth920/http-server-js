Your Task
Completed
Share Feedback
EASY
In this stage, your server will extract the URL path from an HTTP request, and respond with either a 200 or 404, depending on the path.

HTTP request
An HTTP request is made up of three parts, each separated by a CRLF (\r\n):

Request line.
Zero or more headers, each ending with a CRLF.
Optional request body.
Here's an example of an HTTP request:

GET /index.html HTTP/1.1\r\nHost: localhost:4221\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n
Here's a breakdown of the request:

// Request line
GET                          // HTTP method
/index.html                  // Request target
HTTP/1.1                     // HTTP version
\r\n                         // CRLF that marks the end of the request line

// Headers
Host: localhost:4221\r\n     // Header that specifies the server's host and port
User-Agent: curl/7.64.1\r\n  // Header that describes the client's user agent
Accept: */*\r\n              // Header that specifies which media types the client can accept
\r\n                         // CRLF that marks the end of the headers

// Request body (empty)
The "request target" specifies the URL path for this request. In this example, the URL path is /index.html.

Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.

Tests
The tester will execute your program like this:

$ ./your_program.sh
The tester will then send two HTTP requests to your server.

First, the tester will send a GET request, with a random string as the path:

$ curl -v http://localhost:4221/abcdefg
Your server must respond to this request with a 404 response:

HTTP/1.1 404 Not Found\r\n\r\n
Then, the tester will send a GET request, with the path /:

$ curl -v http://localhost:4221
Your server must respond to this request with a 200 response:

HTTP/1.1 200 OK\r\n\r\n
Notes
You can ignore the headers for now. You'll learn about parsing headers in a later stage.
In this stage, the request target is written as a URL path. But the request target actually has four possible formats. The URL path format is called the "origin form," and it's the most commonly used format. The other formats are used for more niche scenarios, like sending a request through a proxy.
For more information about HTTP requests, see the MDN Web Docs on HTTP requests or the HTTP/1.1 specification.


CODE HELP---------
const net = require("net");
// You can use print statements as follows for debugging, they'll be visible when running tests.
console.log("Logs from your program will appear here!");
// Uncomment this to pass the first stage
const server = net.createServer((socket) => {
  socket.on("data", (data) => {
    const request = data.toString();
    if (request.startsWith("GET / ")) {
      const httpResponse = "HTTP/1.1 200 OK\r\n\r\n";
      socket.write(httpResponse)
    } else {
        const httpResponse = "HTTP/1.1 404 Not Found\r\n\r\n"
        socket.write(httpResponse)
    }
    socket.end()
  });
});
server.listen(4221, "localhost");