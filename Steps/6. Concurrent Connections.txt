Your Task
Completed
Share Feedback
EASY



In this stage, you'll add support for concurrent connections.

In most languages, you'd need to either use threads or implement an Event Loop to do this. In JavaScript however, since the concurrency model itself is based on an event loop, most standard library functions are designed to support this kind of concurrent behaviour out of the box. It is very likely that the code you had for the previous stage will pass this stage without any changes!

Tests
The tester will execute your program like this:

$ ./your_program.sh
Then, the tester will create multiple concurrent TCP connections to your server. (The exact number of connections is determined at random.) After that, the tester will send a single GET request through each of the connections.

$ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
$ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
$ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
Your server must respond to each request with the following response:

HTTP/1.1 200 OK\r\n\r\n


----- CODE HELP
JUST WORKS tbh...