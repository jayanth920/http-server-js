Your Task
Completed
Share Feedback
EASY
In this stage, you'll implement the /echo/{str} endpoint, which accepts a string and returns it in the response body.

Response body
A response body is used to return content to the client. This content may be an entire web page, a file, a string, or anything else that can be represented with bytes.

Your /echo/{str} endpoint must return a 200 response, with the response body set to given string, and with a Content-Type and Content-Length header.

Here's an example of an /echo/{str} request:

GET /echo/abc HTTP/1.1\r\nHost: localhost:4221\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n
And here's the expected response:

HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc
Here's a breakdown of the response:

// Status line
HTTP/1.1 200 OK
\r\n                          // CRLF that marks the end of the status line

// Headers
Content-Type: text/plain\r\n  // Header that specifies the format of the response body
Content-Length: 3\r\n         // Header that specifies the size of the response body, in bytes
\r\n                          // CRLF that marks the end of the headers

// Response body
abc                           // The string from the request
The two headers are required for the client to be able to parse the response body. Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.

Tests
The tester will execute your program like this:

$ ./your_program.sh
The tester will then send a GET request to the /echo/{str} endpoint on your server, with some random string.

$ curl -v http://localhost:4221/echo/abc
Your server must respond with a 200 response that contains the following parts:

Content-Type header set to text/plain.
Content-Length header set to the length of the given string.
Response body set to the given string.
HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc


-------CODE HELP
const server = net.createServer((socket) => {
  socket.on("data", (data) => {
    const req = data.toString();
    console.log(req);  // For debugging purposes
    // Parse the request line
    const requestLine = req.split('\r\n')[0];
    const [method, path] = requestLine.split(' ');
    if (method === "GET" && path === "/") {
      const httpResponse = "HTTP/1.1 200 OK\r\n\r\n";
      socket.write(httpResponse);
    } else if (method === "GET" && path.startsWith("/echo/")) {
      const content = path.split("/echo/")[1];
      const httpResponse = `HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: ${content.length}\r\n\r\n${content}`;
      socket.write(httpResponse);
    } else {
      const httpResponse = "HTTP/1.1 404 Not Found\r\n\r\n";
      socket.write(httpResponse);
    }
    socket.end()
  });
});