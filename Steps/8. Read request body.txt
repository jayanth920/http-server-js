Your Task
Completed
Share Feedback
MEDIUM
In this stage, you'll add support for the POST method of the /files/{filename} endpoint, which accepts text from the client and creates a new file with that text.

Request body
A request body is used to send data from the client to the server.

Here's an example of a POST /files/{filename} request:

// Request line
POST /files/number HTTP/1.1
\r\n

// Headers
Host: localhost:4221\r\n
User-Agent: curl/7.64.1\r\n
Accept: */*\r\n
Content-Type: application/octet-stream  // Header that specifies the format of the request body
Content-Length: 5\r\n                   // Header that specifies the size of the request body, in bytes
\r\n

// Request Body
12345
Tests
The tester will execute your program with a --directory flag. The --directory flag specifies the directory to create the file in, as an absolute path.

$ ./your_program.sh --directory /tmp/
The tester will then send a POST request to the /files/{filename} endpoint on your server, with the following parts:

Content-Type header set to application/octet-stream.
Content-Length header set to the size of the request body, in bytes.
Request body set to some random text.
$ curl -v --data "12345" -H "Content-Type: application/octet-stream" http://localhost:4221/files/file_123
Your server must return a 201 response:

HTTP/1.1 201 Created\r\n\r\n
Your server must also create a new file in the files directory, with the following requirements:

The filename must equal the filename parameter in the endpoint.
The file must contain the contents of the request body.



--------- CODE HELP
const net = require("net");
const fs = require("fs");
const server = net.createServer((socket) => {
  let requestData = '';
  
  socket.on("data", (data) => {
    requestData += data.toString();
    const headerEndIndex = requestData.indexOf('\r\n\r\n');
    if (headerEndIndex !== -1) {
      const reqObj = requestData.substring(0, headerEndIndex);
      const body = requestData.substring(headerEndIndex + 4);
      console.log("Request Object\r\n", reqObj);
      const [requestLine, ...headerLines] = reqObj.split("\r\n");
      const [method, path, ...others] = requestLine.split(" ");
      const headers = headerLines.reduce((acc, line) => {
        const [key, val] = line.split(": ");
        if (key && val) {
          acc[key] = val;
        }
        return acc;
      }, {});

      if (method === "GET" && path === "/") {
        const httpResponse = "HTTP/1.1 200 OK\r\n\r\n";
        socket.write(httpResponse);
      } else if (method === "GET" && path.includes("/echo")) {
        const content = path.split("/echo/")[1];
        const httpResponse = `HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: ${content.length}\r\n\r\n${content}`;
        socket.write(httpResponse);
      } else if (method === "GET" && path.startsWith("/files/")) {
        const filename = path.split("/files/")[1];
        const directory = process.argv[3];
        if (fs.existsSync(`${directory}/${filename}`)) {
          const content = fs.readFileSync(`${directory}/${filename}`).toString();
          const res = `HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: ${content.length}\r\n\r\n${content}\r\n`;
          socket.write(res);
        } else {
          const httpResponse = "HTTP/1.1 404 Not Found\r\n\r\n";
          socket.write(httpResponse);
        }
      } else if (method === "GET" && path === "/user-agent") {
        const userAgent = headers["User-Agent"];
        if (userAgent) {
          const httpResponse = `HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: ${userAgent.length}\r\n\r\n${userAgent}`;
          socket.write(httpResponse);
        } else {
          const httpResponse = "HTTP/1.1 400 Bad Request\r\n\r\n";
          socket.write(httpResponse);
        }
      } else if (method === "POST" && path.startsWith("/files/")) {
        const filename = path.split("/files/")[1];
        const directory = process.argv[3];
        const filePath = `${directory}/${filename}`;
        fs.writeFile(filePath, body, (err) => {
          if (err) {
            const httpResponse = "HTTP/1.1 500 Internal Server Error\r\n\r\n";
            socket.write(httpResponse);
          } else {
            const httpResponse = "HTTP/1.1 201 Created\r\n\r\n";
            socket.write(httpResponse);
          }
          socket.end();
        });
      } else {
        const httpResponse = "HTTP/1.1 404 Not Found\r\n\r\n";
        socket.write(httpResponse);
      }
    }
  });
  socket.on("error", () => {
    socket.write("HTTP/1.1 500 Internal Server Error\r\n\r\n");
    socket.end();
  });
});
server.listen(4221, () => {
  console.log("Server Listening on port 4221");
});